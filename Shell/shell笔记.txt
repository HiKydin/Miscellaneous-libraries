shell编程

1、shell编程：Linux中的所有命令统称shell命令，shell利用特定的语法规则将这些命令组织起来，写成一个脚本程序，去自动化管理，控制linux系统
	shell编程是一门专门的编程的语言
	脚本程序：不需要编译，代码写好之后就可以直接运行。
	shell脚本程序：后缀名.sh
	注意：不要windows中编辑器编写shell脚本，可能添加了特殊字符，导致脚本出错
	shell中的注释： #, 在需要注释内容前面加上#号

2、shell的基本内容：
	变量、特殊符号、条件判断、控制
	（1）第一个shell脚本程序
	#!/bin/bash    ---->bash是shell的脚本解释器的名字
	执行shell脚本：
		方法一：./脚本名字
		方法二：source 脚本名字
	（2）shell编程中的变量
		2.1 普通的定义和使用
			shell中的普通变量是没有类型   变量名=赋值
			name="zhangsan"
			num=12
			注意：赋值符两边不能空格
			如果打印变量的值，在变量前面加上$（取出变量的值）
			
		2.2命令行变量
			$#	参数的个数，不包括xxx.sh本身
			$0	所执行的xxx.sh
			$1	是脚本的第一个参数
			$@	打印所传递的所有参数
			$$	获取当前的进程id
			$?	上一个命令执行的结果（判断上一条命令是否执行成功，如果成功 返回0， 失败 返回非0）
练习：
	1、写一个shell脚本，实现在家目录自动新建一个文件夹叫2022，并且修改文件夹的权限为777，2022里面还必须有个新的文件三角座hello.c
	2、写一个脚本，通过传参实现求两个整数的和，这个两个整数通过命令行传参传进去

	（3）shell脚本中的运算
		+ - \* / %
		格式：
			`expr 变量1 运算符 变量2`
			注意：乘法是不能直接写成*，需要转义
	（4）shell中输入输出
		输入：read
			read str1 //从键盘输入的字符串并存放在str1这个变量中
			read -p "please input a string" str   //打印提示，并且获取输入存在str里面
		输出：echo
	（5）shell编程中的特殊符号
		5.1 双引号、单引号、反引号
		双引号：name="zhangsan"
			n=12
		echo "my name is $name"		//可以引用变量
		echo "execute ls is : `ls`"     //可以引用命令
		单引号：
		echo 'my name is $name'
		echo 'execute ls is : `ls`'			//不能引用变量和命令。原样输出
		反引号：在双引号中引用命令
	5.2 通配符*  管道|  重定向> < >>  [a-z] [0-9] [^0-9]		
		* ：任意字符任意长度
		|：管道，可以将多个命令组合在一起，把上一条命令的结果作为下个一个命令的输入	
		ls | wc  //将ls的结果作为wc的输入进行统计
		等价于
		ls > b.txt
		wc b.txt
		echo "hello wolrd" >> b.txt  //追加重定向输出
		[a-z]：表示a-z之间的任意字符
		[A-Z]
		[0-9] ：表示0-9中任意数字
		[^0-9]：非数字
	（6）shell中的条件判断、循环
		6.1 test判断
			语法格式： test -选项 文件名/字符串  
						[ -选项 文件名 ]   //注意中括号两边有空格
		6.2 if条件判断
			c语言  if   if else   if else if
			shell :
			 if  条件   //多个条件，用&&连接
				then
					你要执行的代码
			fi

			if 条件
				then
					你要执行的代码
			else
				其他的代码
			fi
			
			if 条件
				then
				 	你要执行的代码
			elif 条件
				then
					你要执行的代码
			else
				其他的代码
			fi	
练习：
	1、写一个脚本，传一个名字，自动生成C编写模板
	2、写一个脚本，判断字符串大小
		
		




	